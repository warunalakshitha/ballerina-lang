// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

# Public Ballerina API - Ballerina interface to an AMQP `Channel`.
# To provide AMQ `Channel` related functionalities.
#
# + connection - Reference to a Ballerina RabbitMQ `Connection`.
public type Channel client object {

    Connection? connection;

    # Initializes a Ballerina `Channel` object with the given `Connection` object or connection parameters.
    # Creates a `Connection` object if only the connection configuration is given.
    #
    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.
    public function __init(ConnectionConfiguration|Connection connectionOrConnectionConfig) {
        self.connection = (connectionOrConnectionConfig is Connection) ?
                                connectionOrConnectionConfig : new Connection(connectionOrConnectionConfig);
        self.createChannel(self.connection);
    }

    # Actively declare a non-exclusive, autodelete, non-durable queue, or queue with the given configurations.
    #
    # + queueConfig - Holds the parameters required to declare a queue.
    # + return - The name of the queue if autogenerated or nil if the queue was successfully
    #               generated with the given parameters. An error is returned if an I/O error is encountered.
    public remote function queueDeclare(QueueConfiguration? queueConfig = ()) returns string | error? = external;

    # Actively declare a non-autodelete, non-durable exchange with no extra arguments,
    # If the arguments are specifed, then the exchange is declared accordingly.
    #
    # + exchangeConfig - Holds parameters required to declare an exchange.
    # + return - An error if an I/O error is encountered or nil if successful.
    public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns error? = external;

    # Binds a queue to an exchange with the given binding key.
    #
    # + queueName - Name of the queue.
    # + exchangeName - Name of the exchange.
    # + bindingKey - Binding key used to bind the queue to the exchange.
    # + return - An error if an I/O error is encountered or nil if successful.
    public remote function queueBind(string queueName, string exchangeName, string bindingKey)
                                        returns error? = external;

    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level
    # protocol exception, which closes the channel.
    #
    # + messageContent - The message body.
    # + routingKey - The routing key.
    # + exchangeName - The name of the exchange to which the message is published.
    # + properties - Other properties for the message - routing headers etc.
    # + return - An error if an I/O error is encountered or nil if successful.
    public remote function basicPublish(@sensitive MessageContent messageContent, string routingKey,
                        string exchangeName = "", BasicProperties? properties = ()) returns error? = external;

    # Deletes the queue with the given name although it is in use or has messages on it.
    # If the paramters ifUnused or ifEmpty is given, the queue is checked before deleting.
    #
    # + queueName - Name of the queue to be deleted.
    # + ifUnused - True if the queue should be deleted only if not in use.
    # + ifEmpty - True if the queue should be deleted only if empty.
    # + return - An error if an I/O error is encountered or nil if successful.
    public remote function queueDelete(string queueName, boolean? ifUnused = (), boolean? ifEmpty = ())
                                            returns error? = external;

    # Deletes the exchange with the given name.
    #
    # + exchangeName - The name of the exchange.
    # + return - An I/O error if an error is encountered or nil otherwise.
    public remote function exchangeDelete(string exchangeName) returns error? = external;

    # Purges the contents of the given queue.
    #
    # + queueName - The name of the queue.
    # + return - An error if an I/O error is encountered or nil if successful.
    public remote function queuePurge(string queueName) returns error? = external;

    # Closes the RabbitMQ `Channel`.
    #
    # + closeCode - The close code (For information, go to the "Reply Codes" section in the
    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).
    # + closeMessage - A message indicating the reason for closing the channel.
    # + return - An error if an I/O problem is encountered.
    public function close(int? closeCode = (), string? closeMessage = ()) returns error? = external;

    # Aborts the RabbitMQ `Channel`. Forces the `Channel` to close and waits for all the close operations
    # to complete. Any encountered exceptions in the close operations are silently discarded.
    #
    # + closeCode - The close code (For information, go to the "Reply Codes" section in the
    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).
    # + closeMessage - A message indicating the reason for closing the channel.
    # + return - An error if an I/O problem is encountered.
    public function abortChannel(int? closeCode = (), string? closeMessage = ()) returns error? = external;

    # Retrieve the Connection which carries this channel.
    #
    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.
    public function getConnection() returns Connection | error = external;

    private function createChannel(Connection? connection) = external;
};

# Holds the types of message content that can be published.
type MessageContent int | float | byte | boolean | string | map<any> | xml | json | byte[];
